import { ImageSource } from 'tns-core-modules/image-source';
import { Image } from 'tns-core-modules/ui/image';
export declare class ImageFilters {
  constructor();

  sepiaEffect(img: Image, intensity: number): Promise<ImageSource>;
  gamma(img: Image, intensity: number): Promise<ImageSource>;
  invert(img: Image): Promise<ImageSource>;
  chromeEffect(img: Image): Promise<ImageSource>;
  fadeEffect(img: Image): Promise<ImageSource>;
  vintage(img: Image): Promise<ImageSource>;
  colorize(img: Image, intensity: number): Promise<ImageSource>;
  motionBlur(img: Image): Promise<ImageSource>;
  comicBook(img: Image): Promise<ImageSource>;
  crystalize(img: Image): Promise<ImageSource>;
  colorEdges(img: Image): Promise<ImageSource>;
  coloringBook(img: Image): Promise<ImageSource>;
  dull(img: Image): Promise<ImageSource>;
  threeD(img: Image): Promise<ImageSource>;
  sketch(img: Image): Promise<ImageSource>;
  pointillize(img: Image): Promise<ImageSource>;
  spotLight(img: Image): Promise<ImageSource>;
  kaleidoscope(img: Image): Promise<ImageSource>;
  opTile(img: Image): Promise<ImageSource>;
  perspectiveTile(img: Image): Promise<ImageSource>;
  twirl(img: Image): Promise<ImageSource>;
  exposure(img: Image, intensity: number): Promise<ImageSource>;
  brightness(img: Image, intensity: number): Promise<ImageSource>;
  vibrant(img: Image, intensity: number): Promise<ImageSource>;
  gaussianBlur(img: Image, radius: number): Promise<ImageSource>;
  blackAndWhite(img: Image): Promise<ImageSource>;
  tonalEffect(img: Image): Promise<ImageSource>;
  circularWrap(img: Image): Promise<ImageSource>;
  holeDistort(img: Image): Promise<ImageSource>;
  lightTunnel(img: Image): Promise<ImageSource>;
  pinchDistort(img: Image): Promise<ImageSource>;
  torusLensDistort(img: Image): Promise<ImageSource>;
  vortexDistort(img: Image): Promise<ImageSource>;
  circularScreen(img: Image): Promise<ImageSource>;
  halftone(img: Image): Promise<ImageSource>;
  lineScreen(img: Image): Promise<ImageSource>;
  contrast(img: Image, intensity: number): Promise<ImageSource>;
  sharpen(img: Image, intensity: number): Promise<ImageSource>;
  posterize(img: Image, intensity: number): Promise<ImageSource>;
}
